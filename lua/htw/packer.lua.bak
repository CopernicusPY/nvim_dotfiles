local fn = vim.fn


local install_path = fn.stdpath "data" .. "/site/pack/packer/start/packer.nvim"
if fn.empty(fn.glob(install_path)) > 0 then
    PACKER_BOOTSTRAP = fn.system {
        "git",
        "clone",
        "--depth",
        "1",
        "https://github.com/wbthomason/packer.nvim",
        install_path,
    }
    print "[*] Installing `packer`. Restart Neovim . . ." 
    vim.cmd [[packeradd packer.nvim]]
end


vim.cmd [[
    augroup packer_user_config
        autocmd!
        autocmd BufWritePost packer.lua source <afile> | PackerSync
    augroup end
]]


local status_ok, packer = pcall(require, "packer")
if not status_ok then
    return
end

packer.init {
    display = {
        openfn = function()
            return require("packer.util").float { border = "rounded" }
        end,
    },
}

return packer.startup(function(use)
  -- Packer can manage itself
  use 'wbthomason/packer.nvim'
  -- Telescope
  use {
	  'nvim-telescope/telescope.nvim', tag = '0.1.0',
	  -- or                            , branch = '0.1.x',
	  requires = { {'nvim-lua/plenary.nvim'} }
  }
  -- Dev icons
  use {'nvim-tree/nvim-web-devicons'}
  -- Lualine
  use {
    'nvim-lualine/lualine.nvim',
     requires = { 'nvim-tree/nvim-web-devicons', opt = true }
  }
  -- Colorscheme
  use({"arcticicestudio/nord-vim"})
  use({"morhetz/gruvbox"})
  -- Treesitter
  use({"nvim-treesitter/nvim-treesitter", run=":TSUpdate"})
  -- Git signs
  use { -- Adds git releated signs to the gutter, as well as utilities for managing changes
    'lewis6991/gitsigns.nvim',
    opts = {
      -- See `:help gitsigns.txt`
      signs = {
        add = { text = '+' },
        change = { text = '~' },
        delete = { text = '_' },
        topdelete = { text = 'â€¾' },
        changedelete = { text = '~' },
      },
    },
  }
  -- Todo comments
  use {
    "folke/todo-comments.nvim",
    requires = "nvim-lua/plenary.nvim"
  }
  use {
    -- Add indentation guides even on blank lines
    'lukas-reineke/indent-blankline.nvim',
    -- Enable `lukas-reineke/indent-blankline.nvim`
    -- See `:help indent_blankline.txt`
  }
  -- Use gc to comment selected block
  use {
    'numToStr/Comment.nvim',
    config = function()
        require('Comment').setup()
    end
  }
    use { "hrsh7th/nvim-cmp"} -- The completion plugin
  use { "hrsh7th/cmp-buffer" } -- buffer completions
  use { "hrsh7th/cmp-path" } -- path completions
	use { "saadparwaiz1/cmp_luasnip"} -- snippet completions
	use { "hrsh7th/cmp-nvim-lsp"}
	use { "hrsh7th/cmp-nvim-lua" }
  -- File explorer
  use {"nvim-tree/nvim-tree.lua", requires={"nvim-tree/nvim-web-devicons"}}
  use { "L3MON4D3/LuaSnip" } --snippet engine
  use { "rafamadriz/friendly-snippets"} -- a bunch of snippets to use
  if PACKER_BOOTSTRAP then
    require("packer").sync()
  end
end)
